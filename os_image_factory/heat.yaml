heat_template_version: 2014-10-16
description: HOT template for multiple net with VM

parameters:
  key_name:
    type: string
    description: Key Name

  public_net:
    type: string
    description: public network id

  web_flavor:
    type: string
    description: Flavor Name

  web_image:
    type: string
    description: Image Name
  
  dmz_name:
    type: string
  dmz_cidr:
    type: string
  dmz_gateway_ip:
    type: string
  dmz_host_routes:
    type: json
  dmz_allocation_pools:
    type: json
  dmz_dns_nameservers:
    type: comma_delimited_list
  dmz_enable_dhcp:
    type: string
  dmz_ip_version:
    type: number

resources:
  router1:
    type: OS::Neutron::Router
    properties:
      external_gateway_info:
        network: { get_param: public_net }
     
  dmz_zone:
    type: Lib::Stack::Net
    properties:
      name: { get_param: dmz_name }
      cidr: { get_param: dmz_cidr }
      gateway_ip: { get_param: dmz_gateway_ip }
      host_routes: { get_param: dmz_host_routes }
      allocation_pools: { get_param: dmz_allocation_pools }
      enable_dhcp: { get_param: dmz_enable_dhcp }
      ip_version: { get_param: dmz_ip_version }
      dns_nameservers: { get_param: dmz_dns_nameservers }
      router_id: { get_resource: router1 }

  web1:
    type: Lib::Stack::WebFip
    depends_on: [ dmz_zone, install_web ]
    properties:
      key_name: { get_param: key_name }
      instance1_flavor: { get_param: web_flavor }
      instance1_image: { get_param: web_image }
#      instance1_vol_size: { get_param: web_vol_size }
#      instance1_vol_type: { get_param: web_vol_type }
      public_net_id: { get_param: public_net }
      private_net_id: { get_attr: [dmz_zone, net_id] }
      private_subnet_id: { get_attr: [dmz_zone, subnet_id] }
      user_data: { get_attr: [ install_web, userdata ] }

  install_web:
    type: Lib::Stack::UserData::OSImageFactory
    properties:
      private_net_id: { get_attr: [dmz_zone, net_id] }

outputs:
  web1_public_ip:
    description: Floating IP address of web1
    value: { get_attr: [ web1, floating_ip_address ] }
  web1_private_ip:
    description: Private IP address of web1
    value: { get_attr: [ web1, first_address ] }
