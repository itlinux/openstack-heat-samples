heat_template_version: 2014-10-16

description: >
  Generic template 1 VM with boot on volume
  1 server front with SSH/HTTP/HTTPS open

parameters:

  key_name:
    type: string
    description: Name of keypair to assign to servers

  instance1_image:
    type: string
    description: Name of image to use for instance1 server
  instance1_flavor:
    type: string
    description: Flavor to use for instance1 server
#  instance1_vol_size:
#    type: number
#    description: The size of the Cinder volume for instance1 server
#  instance1_vol_type:
#    type: string
#    description: The volume type of the Cinder volume for instance1 server
#
  private_net_id:
    type: string
    description: ID of private network into which servers get deployed
  private_subnet_id:
    type: string
    description: ID of private sub network into which servers get deployed
  user_data:
    type: string

resources:
  Instance1_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Add security group rules for server
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 22
          port_range_max: 22
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 80
          port_range_max: 80
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 443
          port_range_max: 443
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 8080
          port_range_max: 8080
        - remote_ip_prefix: 0.0.0.0/0
          protocol: icmp

  Instance1_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_param: private_net_id }
      fixed_ips:
        - subnet_id: { get_param: private_subnet_id }
      security_groups: [{ get_resource: Instance1_security_group }]

##  Instance1_root_vol:
##    type: OS::Cinder::Volume
##    properties:
##      size: { get_param: instance1_vol_size }
##      image: { get_param: instance1_image }
##      volume_type: { get_param: instance1_vol_type }
##
  Instance1_Server:
    type: OS::Nova::Server
#   depends_on: Instance1_root_vol
    properties:
#   block_device_mapping: [{ device_name: "vda", volume_id : { get_resource : Instance1_root_vol }, delete_on_termination : "true" }]
       image: { get_param: instance1_image }
       flavor: { get_param: instance1_flavor }
       key_name: { get_param: key_name }
       networks:
         - port: { get_resource: Instance1_port }
       user_data_format: RAW
       user_data: { get_param: user_data }

outputs:
  first_address:
    description: Instance1 private IP address
    value: { get_attr: [ Instance1_Server, first_address ] }
  server_id:
    description: Instance1 nova ressource id
    value: { get_resource: Instance1_Server }
  port_id:
    description: Instance1 port id
    value: { get_resource: Instance1_port }
  security_group_id:
    description: Instance1 security id
    value: { get_resource: Instance1_security_group }
##  Instance1_root_vol_id:
##    description: Instance1 cinder volume id
##    value: { get_resource: Instance1_root_vol }
#  Bucket_domain:
#    description: "Domain of Swift host"
#    value: { get_attr: [SwiftContainer, DomainName] }
