heat_template_version: 2013-05-23

description: >
  Generic template 1 HA Proxy with boot on volume
  1 server front with SSH/HTTP/HTTPS open

parameters:

  key_name:
    type: string
    description: Name of keypair to assign to servers

  haproxy_image:
    type: string
    description: Name of image to use for haproxy server
  haproxy_flavor:
    type: string
    description: Flavor to use for haproxy server
  haproxy_vol_size:
    type: number
    description: The size of the Cinder volume for haproxy server
  haproxy_vol_type:
    type: string
    description: The volume type of the Cinder volume for haproxy server

  public_net_id:
    type: string
    description: >
      ID of public network for which floating IP addresses will be allocated
  private_net_id:
    type: string
    description: ID of private network into which servers get deployed
  private_subnet_id:
    type: string
    description: ID of private sub network into which servers get deployed

  servers:
    type: comma_delimited_list
    label: Servers
    description: Comma separated list of servers in the cluster.
  port_number:
    type: number
    label: Port number
    description: Port number to proxy.
    default: 80

resources:
  haproxy_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Add security group rules for server
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 22
          port_range_max: 22
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: { get_param: port_number }
          port_range_max: { get_param: port_number }
        - remote_ip_prefix: 0.0.0.0/0
          protocol: icmp

  haproxy_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_param: private_net_id }
      fixed_ips:
        - subnet_id: { get_param: private_subnet_id }
      security_groups: [{ get_resource: haproxy_security_group }]
      replacement_policy: AUTO

  haproxy_root_vol:
    type: OS::Cinder::Volume
    properties:
      size: { get_param: haproxy_vol_size }
      image: { get_param: haproxy_image }
      volume_type: { get_param: haproxy_vol_type }

  haproxy_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: { get_param: public_net_id }
      port_id: { get_resource: haproxy_port }

##############
# INSTANCE 1 #
##############

  haproxy_Server:
         type: OS::Nova::Server
         depends_on: haproxy_root_vol
         properties:
           block_device_mapping: [{ device_name: "vda", volume_id : { get_resource : haproxy_root_vol }, delete_on_termination : "true" }]
           flavor: { get_param: haproxy_flavor }
           key_name: { get_param: key_name }
           networks:
             - port: { get_resource: haproxy_port }
           metadata:
             servers: { get_param: servers }
           user_data_format: RAW
           user_data:
             get_resource: init_server
     
  init_server:
    type: OS::Heat::MultipartMime
    properties:
      parts:
      - config: { get_resource: system_bootstrap }
      - config: { get_resource: haproxy_UserData }

  system_bootstrap:
    type: OS::Heat::SoftwareConfig
    properties:
      config: |
        #!/bin/bash
        set -x
        sleep 60

  haproxy_UserData:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        preserve_hostname: true
        manage_etc_hosts: false
        write_files:
        - path: /root/launch.sh
          content:
            str_replace:
              params:
                $public_ip$: { get_attr: [haproxy_floating_ip, floating_ip_address] }
                __port__: { get_param: port_number }
              template: |
                #!/bin/bash
                set -x
                export DEBIAN_FRONTEND=noninteractive
                apt-get -qqy update
                apt-get -qqy upgrade
                apt-get -y install build-essential python python-dev python-virtualenv supervisor haproxy

                sed -i 's/ENABLED=0/ENABLED=1/' /etc/default/haproxy

                # save haproxy original configuration
                cp /etc/haproxy/haproxy.cfg /etc/haproxy/haproxy_base.cfg

                # write an initial empty list of worker servers
                cat >>/etc/haproxy/servers.json <<EOF
                []
                EOF

                # write the update script
                cat >>/etc/haproxy/update.py <<EOF
                import sys
                import json
                import subprocess

                # load server list from metadata
                metadata = json.loads(sys.stdin.read())
                new_servers = json.loads(metadata.get('meta', {}).get('servers', '[]'))
                if not new_servers:
                    sys.exit(1)  # bad metadata

                # compare against known list of servers
                current_servers = json.loads(open('/etc/haproxy/servers.json').read())
                if current_servers == new_servers:
                    sys.exit(0)  # no changes

                # record updated list of servers
                open('/etc/haproxy/servers.json', 'wt').write(json.dumps(new_servers))

                # generate a new haproxy config file
                f = open('/etc/haproxy/haproxy.cfg', 'wt')
                f.write(open('/etc/haproxy/haproxy_base.cfg').read())
                f.write("""
                listen app *:80
                    mode http
                    balance roundrobin
                    option httpclose
                    option forwardfor
                """)
                for i, server in enumerate(new_servers):
                    f.write('    server server-{0} {1}:{2}\n'.format(i, server, __port__))
                f.close()

                # reload haproxy's configuration
                print('Reloading haproxy with servers: ' + ', '.join(new_servers))
                subprocess.call(['service', 'haproxy', 'reload'])
                EOF

                # add a cron job to monitor the metadata and update haproxy
                crontab -l >_crontab || true
                echo "* * * * * /usr/bin/curl -s http://169.254.169.254/openstack/latest/meta_data.json | python /etc/haproxy/update.py | /usr/bin/logger -t haproxy_update" >>_crontab
                crontab <_crontab
                rm _crontab

          owner: root:root
          permissions: '0755'

        bootcmd:
          - cloud-init-per instance my_set_hostname sh -xc "wget -O - -q http://169.254.169.254/latest/meta-data/local-hostname > /etc/hostname ; hostname -F /etc/hostname"
          - cloud-init-per instance my_set_hosts sh -xc "sed -i -e '/^127.0.1.1/d' /etc/hosts;  ( echo -n '127.0.1.1 ' ; cat /etc/hostname; echo ) >> /etc/hosts"

        runcmd:
          - /root/launch.sh

outputs:
  haproxy_private_ip:
    description: haproxy private IP address
    value: { get_attr: [ haproxy_Server, first_address ] }
  haproxy_public_ip:
    description: haproxy public IP address
    value: { get_attr: [ haproxy_floating_ip, floating_ip_address ] }
  haproxy_Server_id:
    description: haproxy nova ressource id
    value: { get_resource: haproxy_Server }
  haproxy_port_id:
    description: haproxy port id
    value: { get_resource: haproxy_port }
  haproxy_security_group_id:
    description: haproxy security id
    value: { get_resource: haproxy_security_group }
  haproxy_root_vol_id:
    description: haproxy cinder volume id
    value: { get_resource: haproxy_root_vol }
  haproxy_floating_ip_id:
    description: haproxy floating ip id
    value: { get_resource: haproxy_floating_ip }
  haproxy_name:
    description: Name of the HAProxy instance.
    value: { get_attr: [haproxy_Server, name] }
