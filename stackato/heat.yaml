heat_template_version: 2013-05-23
description: HOT template for on simple VM with floating ips.

parameters:
  key_name:
    type: string
    description: Key Name

  flavor:
    type: string
    description: Flavor Name

  image_id:
    type: string
    description: Image Name
 
  public_net:
    type: string
    description: public network id

  name:
    type: string
    description: private net name
    default: private

  cidr:
    type: string
    description: private subnet cidr
    default: 172.16.1.0/24

  gateway_ip:
    type: string
    description: private subnet gateway ip
    default: 172.16.1.1

  allocation_pools:
    type: json
    description: private subnet pool start
    default:
        "start": "172.16.1.100"
        "end": "172.16.1.200"

  dns_nameservers:
    type: comma_delimited_list
    description: private subnet pool end
    default: '8.8.8.8'

  enable_dhcp:
    type: string
    description: private subnet cidr
    default: 'True'

  ip_version:
    type: number
    description: private subnet cidr
    default: 4

resources:
  router1:
    type: OS::Neutron::Router
    properties:
      external_gateway_info:
        network: { get_param: public_net }
 
  private_net:
    type: OS::Neutron::Net
    properties:
      name:
        str_replace:
           template:
              $subnet-subnet
           params:
              $subnet: { get_param: name }
     
  private_subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: private_net }
      ip_version: { get_param: ip_version }
      cidr: { get_param: cidr }
      gateway_ip: { get_param: gateway_ip }
      enable_dhcp: { get_param: enable_dhcp }
      dns_nameservers: { get_param: dns_nameservers }
      allocation_pools:
        - { get_param: allocation_pools }

  router1_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router1 }
      subnet_id: { get_resource: private_subnet }

  server1_sg:
    type: OS::Neutron::SecurityGroup
    properties:
      name:
        str_replace:
          template:
            $name-ext
          params:
            $name: { get_param: name }
      rules:
      - {direction: ingress, port_range_max: 22, port_range_min: 22, protocol: tcp, remote_ip_prefix: 0.0.0.0/0}
      - {direction: ingress, port_range_max: 80, port_range_min: 80, protocol: tcp, remote_ip_prefix: 0.0.0.0/0}
      - {direction: ingress, port_range_max: 443, port_range_min: 443, protocol: tcp, remote_ip_prefix: 0.0.0.0/0}
      - {direction: ingress, protocol: icmp, remote_ip_prefix: 0.0.0.0/0}

  server1_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: private_net }
      security_groups: [ get_resource: server1_sg ]
      fixed_ips:
        - subnet_id: { get_resource: private_subnet }

  server1_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: { get_param: public_net }
      port_id: { get_resource: server1_port }

  server1:
    type: OS::Nova::Server
    properties:
      name: node
      image: { get_param: image_id }
      flavor: {get_param: flavor}
      key_name: {get_param: key_name}
      networks:
        - port: { get_resource: server1_port }
      user_data_format: RAW
      user_data:
        str_replace:
          template:
            get_file: ../config-scripts/configure_stackato.sh
          params:
            $public_ip: { get_attr: [server1_floating_ip, floating_ip_address] }

outputs:
  server1_private_ip:
    description: Private IP address of server1
    value: { get_attr: [ server1, first_address ] }
  server1_public_ip:
    description: Floating IP address of server1
    value: { get_attr: [ server1_floating_ip, floating_ip_address ] }

